E2yL <- 1-t*(z/(1-K))
VR <- E2yR - EyR^2
VL <- E2yL - EyL^2
Vdiff <- VL+VR
#Uncorrected
hglm1
#Weighted
hglm2
#Mean corrected
hglm4
#Mean corrected probit
hglm5
hglm5$varRanef*Vdiff
n=1e6
n.cc=500
p=20
x <- sample(c(0,1),n, replace=TRUE)
mu=-3
beta=0
Z <- diag(p)%x%rep(1,n/p)
Z <- Z[sample(1:n,n),]
sigma2u=2
u <- rnorm(p,0,sqrt(sigma2u))
y <- mu+x*beta+Z%*%u+rnorm(n)
d <- as.numeric(y>0)
K= mean(d)
test <- (cumsum(d)<(n.cc+1))
d.cc <- d[test]
test1 <- c(1:length(d.cc))[(d.cc==1)]
test0 <- sort(sample(c(1:sum(test))[d.cc==0],n.cc))
y.cc <- y[c(test1,test0)]
x.cc <- x[c(test1,test0)]
Z.cc <- Z[c(test1,test0),]
d2.cc <- as.numeric(y.cc>0)
library(hglm)
hglm1 <- hglm(y=d2.cc,X=model.matrix(~x.cc),Z=Z.cc, family=binomial(link=probit), fix.disp=1)
hglm1
image(Z.cc)
#Weighted log-likelihood correction
hglm2 <- hglm(y=d2.cc,X=model.matrix(~x.cc),Z=Z.cc, family=binomial(link=probit), fix.disp=1, weights=c(rep(K/0.5,n.cc),rep((1-K)/0.5,n.cc)))
hglm2
dev <- (hglm2$res^2)/(1-hglm2$hv[1:(2*n.cc)])
plot(dev)
#Weighted log-likelihood correction
hglm3 <- hglm(y=d2.cc,X=model.matrix(~x.cc),Z=Z.cc, family=binomial(link=probit), fix.disp=1, offset=rep(1-K,2*n.cc))
hglm3
###
ofs<-log((1-K)/K)
hglm4 <- hglm(y=d2.cc,X=model.matrix(~x.cc),Z=Z.cc, family=binomial(link=probit), fix.disp=1, offset=rep(ofs,2*n.cc))
hglm4
###
t=qnorm(1-K)
z=dnorm(t)
diff=z/K*(1/(1-K))
ofs=diff
hglm5 <- hglm(y=d2.cc,X=model.matrix(~x.cc),Z=Z.cc, family=binomial(link=probit), fix.disp=1, offset=rep(ofs,2*n.cc))
hglm5
EyR <- z/K
EyL <- -z/(1-K)
E2yR <- 1+t*z/K
E2yL <- 1-t*(z/(1-K))
VR <- E2yR - EyR^2
VL <- E2yL - EyL^2
Vdiff <- VL+VR
#Uncorrected
hglm1
#Weighted
hglm2
#Mean corrected
hglm4
#Mean corrected probit
hglm5
hglm5$varRanef*Vdiff
str(hglm5)
set.seed(123)
n.rep=20
beta.hat <- var1 <- var0 <-  NULL
for (kk in 1:n.rep) {
n=1e6
n.cc=500
p=20
x <- sample(c(0,1),n, replace=TRUE)
mu=-3
beta=
Z <- diag(p)%x%rep(1,n/p)
Z <- Z[sample(1:n,n),]
sigma2u=2
u <- rnorm(p,0,sqrt(sigma2u))
y <- mu+x*beta+Z%*%u+rnorm(n)
d <- as.numeric(y>0)
K= mean(d)
test <- (cumsum(d)<(n.cc+1))
d.cc <- d[test]
test1 <- c(1:length(d.cc))[(d.cc==1)]
test0 <- sort(sample(c(1:sum(test))[d.cc==0],n.cc))
y.cc <- y[c(test1,test0)]
x.cc <- x[c(test1,test0)]
Z.cc <- Z[c(test1,test0),]
d2.cc <- as.numeric(y.cc>0)
library(hglm)
###
t=qnorm(1-K)
z=dnorm(t)
diff=z/K*(1/(1-K))
ofs=diff
hglm5 <- hglm(y=d2.cc,X=model.matrix(~x.cc),Z=Z.cc, family=binomial(link=probit), fix.disp=1, offset=rep(ofs,2*n.cc))
#hglm5
EyR <- z/K
EyL <- -z/(1-K)
E2yR <- 1+t*z/K
E2yL <- 1-t*(z/(1-K))
VR <- E2yR - EyR^2
VL <- E2yL - EyL^2
Vdiff <- VL+VR
#Mean corrected probit
#hglm5
var0 <- c(var0,hglm5$varRanef)
var1 <- c(var1,hglm5$varRanef*Vdiff)
beta.hat <- c(beta.hat, hglm5$fixef[1])
}
summary(var0)
summary(var1)
set.seed(123)
n.rep=20
beta.hat <- var1 <- var0 <-  NULL
for (kk in 1:n.rep) {
n=1e6
n.cc=500
p=20
x <- sample(c(0,1),n, replace=TRUE)
mu=-3
beta=0
Z <- diag(p)%x%rep(1,n/p)
Z <- Z[sample(1:n,n),]
sigma2u=2
u <- rnorm(p,0,sqrt(sigma2u))
y <- mu+x*beta+Z%*%u+rnorm(n)
d <- as.numeric(y>0)
K= mean(d)
test <- (cumsum(d)<(n.cc+1))
d.cc <- d[test]
test1 <- c(1:length(d.cc))[(d.cc==1)]
test0 <- sort(sample(c(1:sum(test))[d.cc==0],n.cc))
y.cc <- y[c(test1,test0)]
x.cc <- x[c(test1,test0)]
Z.cc <- Z[c(test1,test0),]
d2.cc <- as.numeric(y.cc>0)
library(hglm)
###
t=qnorm(1-K)
z=dnorm(t)
diff=z/K*(1/(1-K))
ofs=diff
hglm5 <- hglm(y=d2.cc,X=model.matrix(~x.cc),Z=Z.cc, family=binomial(link=probit), fix.disp=1, offset=rep(ofs,2*n.cc))
#hglm5
EyR <- z/K
EyL <- -z/(1-K)
E2yR <- 1+t*z/K
E2yL <- 1-t*(z/(1-K))
VR <- E2yR - EyR^2
VL <- E2yL - EyL^2
Vdiff <- VL+VR
#Mean corrected probit
#hglm5
var0 <- c(var0,hglm5$varRanef)
var1 <- c(var1,hglm5$varRanef*Vdiff)
beta.hat <- c(beta.hat, hglm5$fixef[1])
}
summary(var0)
summary(var1)
summary(beta.hat)
rm(list=ls())
library(hglm)
set.seed(1234)
n.rep=100
beta.hat <- var1 <- var0 <-  NULL
for (kk in 1:n.rep) {
n=1e6
n.cc=500
p=20
x <- sample(c(0,1),n, replace=TRUE)
mu=-3
beta=0
Z <- diag(p)%x%rep(1,n/p)
Z <- Z[sample(1:n,n),]
sigma2u=2
u <- rnorm(p,0,sqrt(sigma2u))
y <- mu+x*beta+Z%*%u+rnorm(n)
d <- as.numeric(y>0)
K= mean(d)
test <- (cumsum(d)<(n.cc+1))
d.cc <- d[test]
test1 <- c(1:length(d.cc))[(d.cc==1)]
test0 <- sort(sample(c(1:sum(test))[d.cc==0],n.cc))
y.cc <- y[c(test1,test0)]
x.cc <- x[c(test1,test0)]
Z.cc <- Z[c(test1,test0),]
d2.cc <- as.numeric(y.cc>0)
###
t=qnorm(1-K)
z=dnorm(t)
diff=z/K*(1/(1-K))
ofs=diff
hglm5 <- hglm(y=d2.cc,X=model.matrix(~x.cc),Z=Z.cc, family=binomial(link=probit), fix.disp=1, offset=rep(ofs,2*n.cc))
#hglm5
EyR <- z/K
EyL <- -z/(1-K)
E2yR <- 1+t*z/K
E2yL <- 1-t*(z/(1-K))
VR <- E2yR - EyR^2
VL <- E2yL - EyL^2
Vdiff <- VL+VR
#Mean corrected probit
#hglm5
var0 <- c(var0,hglm5$varRanef)
var1 <- c(var1,hglm5$varRanef*Vdiff)
beta.hat <- c(beta.hat, hglm5$fixef[1])
}
summary(beta.hat)
summary(var0)
summary(var1)
library(bigRR)
data(Arabidopsis)
W <- scale(Z)/sqrt(ncol(Z))
x=attributes(W)$`scaled:center`
n=length(y)
big1 <- bigRR(y=y,X=matrix(1,n,1), Z=W, family=binomial())
dev <- (big1$u^2)/(1-big1$leverage)
MAF <- (-abs(x)+1)/2
glm1 <- glm(dev~MAF, weights=(1-big1$leverage), family=gamma(link=log))
plot(MAF,dev,pch=".", cex=dev)
summary(glm1)
glm1 <- glm(dev~MAF, weights=(1-big1$leverage), family=Gamma(link=log))
summary(glm1)
set.seed(911)
n <- 100
p <- 10000
Z <- matrix(1, n, p)
MAFs <- runif(p, .01, .5)
for (j in 1:ncol(Z)) Z[sample(1:n, round(n*MAFs[j])),j] <- -1
W <- scale(Z)/sqrt(ncol(Z))
x=attributes(W)$`scaled:center`
y <- rnorm(n)
MAF <- (-abs(x)+1)/2
big1 <- bigRR(y=y,X=matrix(1,n,1), Z=W)
dev <- (big1$u^2)/(1-big1$leverage)
glm1 <- glm(dev~MAF, weights=(1-big1$leverage), family=Gamma(link=log))
summary(glm1)
plot(MAF,dev,pch=".", cex=dev)
## Same as above but with high LD for the low MAF SNPs
set.seed(911)
n <- 100
p <- 10000
Z <- matrix(1, n, p)
MAFs <- runif(p, .01, .5)
for (j in 1:ncol(Z)) Z[sample(1:n, round(n*MAFs[j])),j] <- -1
big <- which.max(MAFs)
# add some perfect LD columns #
for (i in 1:999) Z <- cbind(Z, Z[,big])
W <- scale(Z)/sqrt(ncol(Z))
x=attributes(W)$`scaled:center`
y <- rnorm(n)
MAF <- (-abs(x)+1)/2
big2 <- bigRR(y=y,X=matrix(1,n,1), Z=W)
dev2 <- (big2$u^2)/(1-big2$leverage)
glm3 <- glm(dev2~MAF, family=Gamma(link=log))
summary(glm3)
plot(MAF,dev,pch=".", cex=dev)
plot(MAF,dev2,pch=".", cex=dev)
## Same as above but with high LD for the low MAF SNPs
set.seed(911)
n <- 100
p <- 10000
Z <- matrix(1, n, p)
MAFs <- runif(p, .01, .5)
for (j in 1:ncol(Z)) Z[sample(1:n, round(n*MAFs[j])),j] <- -1
small <- which.min(MAFs)
# add some perfect LD columns #
for (i in 1:999) Z <- cbind(Z, Z[,small])
W <- scale(Z)/sqrt(ncol(Z))
x=attributes(W)$`scaled:center`
y <- rnorm(n)
MAF <- (-abs(x)+1)/2
big2 <- bigRR(y=y,X=matrix(1,n,1), Z=W)
dev2 <- (big2$u^2)/(1-big2$leverage)
glm2 <- glm(dev2~MAF, family=Gamma(link=log))
summary(glm2)
plot(MAF,dev2,pch=".", cex=dev)
## Same as above but with high LD for the low MAF SNPs
set.seed(911)
n <- 100
p <- 10000
Z <- matrix(1, n, p)
MAFs <- runif(p, .01, .5)
for (j in 1:ncol(Z)) Z[sample(1:n, round(n*MAFs[j])),j] <- -1
big <- which.max(MAFs)
# add some perfect LD columns #
for (i in 1:999) Z <- cbind(Z, Z[,big])
W <- scale(Z)/sqrt(ncol(Z))
x=attributes(W)$`scaled:center`
y <- rnorm(n)
MAF <- (-abs(x)+1)/2
big2 <- bigRR(y=y,X=matrix(1,n,1), Z=W)
dev2 <- (big2$u^2)/(1-big2$leverage)
glm3 <- glm(dev2~MAF, family=Gamma(link=log))
summary(glm3)
plot(MAF,dev2,pch=".", cex=dev)
set.seed(911)
n <- 100
p <- 10000
Z <- matrix(1, n, p)
MAFs <- runif(p, .01, .5)
for (j in 1:ncol(Z)) Z[sample(1:n, round(n*MAFs[j])),j] <- -1
W <- scale(Z)/sqrt(ncol(Z))
x=attributes(W)$`scaled:center`
y <- rnorm(n)
MAF <- (-abs(x)+1)/2
big1 <- bigRR(y=y,X=matrix(1,n,1), Z=W)
dev <- (big1$u^2)/(1-big1$leverage)
glm1 <- glm(dev~MAF, weights=(1-big1$leverage), family=Gamma(link=log))
summary(glm1)
plot(MAF,dev,pch=".", cex=dev)
install.packages(pkgs="bigRR")
?install.packages
load("C:/Documents and Settings/All Users/Desktop/Brisbane2013/HGLM_book/Marek_Data/CERISE.RData")
summary(CERISE)
X <- c(1,0,0,0,1,1,1,1,0,1,1,0)
X <- matrix(X,4,3)
X
X <- c(1,0,0,0,1,1,1,1,0,1,1,0)
X <- matrix(X,3,4)
X
X <- c(1,0,0,0,1,1,1,1,0,1,1,0)
X <- matrix(X,3,4)
W <- scale(X)/sqrt(4)
A <- tcrossprod(W)
LD <- cov2cor(crossprod(W))
A
LD
X <- c(1,0,0,0,1,1,1,1,0,1,1,0)
X <- matrix(X,3,4)
W <- scale(X)/sqrt(4)
A <- tcrossprod(W)
LD <- cov2cor(crossprod(W))
X
A
LD
solve(LD)
C=LD*LD
C
C2 <- cov2cor(crossprod(crossprod(W)))
C2
load("C:/Documents and Settings/All Users/Desktop/Brisbane2013/HGLM_book/Marek_Data/CERISE.RData")
summary(CERISE)
library(hglm)
data(semiconductor)
m11 <- hglm(fixed = y ~ x1 + x3 + x5 + x6,
random = ~ 1|Device,
family = Gamma(link = log),
disp = ~ x2 + x3, data = semiconductor)
X <- model.matrix(~ x1 + x3 + x5 + x6, data=semiconductor)
Z <- model.matrix(~ 0+factor(Device), data=semiconductor)
N=length(semiconductor$y)
print(N)
print(ncol(X))
print(ncol(Z))
cat("Effective no. of parameters ", sum(m11$hv[1:N]), "\n")
cat("Effective df ", N-sum(m11$hv[1:N]), "\n")
str(m11)
library(hglm)
data(semiconductor)
m11 <- hglm(fixed = y ~ x1 ,
random = ~ 1|Device,
family = Gamma(link = log),
disp = ~ x2 + x3, data = semiconductor)
X <- model.matrix(~ x1 + x3 + x5 + x6, data=semiconductor)
Z <- model.matrix(~ 0+factor(Device), data=semiconductor)
N=length(semiconductor$y)
print(N)
print(ncol(X))
print(ncol(Z))
cat("Effective no. of parameters ", sum(m11$hv[1:N]), "\n")
cat("Effective df ", N-sum(m11$hv[1:N]), "\n")
m11$dfReFe
library(hglm)
data(semiconductor)
m11 <- hglm(fixed = y ~ x1 + x3,
random = ~ 1|Device,
family = Gamma(link = log),
disp = ~ x2 + x3, data = semiconductor)
X <- model.matrix(~ x1 + x3 + x5 + x6, data=semiconductor)
Z <- model.matrix(~ 0+factor(Device), data=semiconductor)
N=length(semiconductor$y)
print(N)
print(ncol(X))
print(ncol(Z))
cat("Effective no. of parameters ", sum(m11$hv[1:N]), "\n")
cat("Effective df ", N-sum(m11$hv[1:N]), "\n")
m11$dfReFe
library(hglm)
data(semiconductor)
m11 <- hglm(fixed = y ~ x1 + x3 + x5,
random = ~ 1|Device,
family = Gamma(link = log),
disp = ~ x2 + x3, data = semiconductor)
X <- model.matrix(~ x1 + x3 + x5 + x6, data=semiconductor)
Z <- model.matrix(~ 0+factor(Device), data=semiconductor)
N=length(semiconductor$y)
print(N)
print(ncol(X))
print(ncol(Z))
cat("Effective no. of parameters ", sum(m11$hv[1:N]), "\n")
cat("Effective df ", N-sum(m11$hv[1:N]), "\n")
m11$dfReFe
library(hglm)
data(semiconductor)
m11 <- hglm(fixed = y ~ x1 + x3 + x5 + x6,
random = ~ 1|Device,
family = Gamma(link = log),
disp = ~ x2 + x3, data = semiconductor)
X <- model.matrix(~ x1 + x3 + x5 + x6, data=semiconductor)
Z <- model.matrix(~ 0+factor(Device), data=semiconductor)
N=length(semiconductor$y)
print(N)
print(ncol(X))
print(ncol(Z))
cat("Effective no. of parameters ", sum(m11$hv[1:N]), "\n")
cat("Effective df ", N-sum(m11$hv[1:N]), "\n")
m11$dfReFe
library(bigRR)
data(Arabidopsis) #Contains y and Z
X <- model.matrix(y~1)
SNPBLUP.result <- bigRR(y = y, X = X, Z = scale(Z))
str(SNPBLUP.result)
length(SNPBLUP.result$y)
length(SNPBLUP.result$hv)
length(SNPBLUP.result$hglm$hv)
sum(SNPBLUP.result$hglm$hv[1:84])
84-sum(SNPBLUP.result$hglm$hv[1:84])
HEM.result <- bigRR_update(SNPBLUP.result, scale(Z))
84-sum(HEM.result$hglm$hv[1:84])
84-sum(HEM.result$hglm$hv[-(1:84)])
sum(HEM.result$hglm$hv[-(1:84)])
library(bigRR)
data(Arabidopsis) #Contains y and Z
X <- model.matrix(y~1)
SNPBLUP.result <- bigRR(y = y, X = X, Z = scale(Z))
str(SNPBLUP.result)
crossprod(SNPBLUP.result$u)/SNPBLUP.result$lambda
sum(SNPBLUP.results$hv[(1:84)])
sum(SNPBLUP.result$hv[(1:84)])
sum(SNPBLUP.result$hglm$hv[(1:84)])
sum(SNPBLUP.result$hglm$hv[-(1:84)])
84-sum(SNPBLUP.result$hglm$hv[-(1:84)])
crossprod(SNPBLUP.result$u)/SNPBLUP.result$lambda/84
?bigRR
library(bigRR)
?bigRR
bigRR
bigRR.default
bigRR_update
library(dhglm)
data(data_epilepsy)
model1 <- glm(y~B+T+A+T*B+V, family=poisson(link=log), data=data_epilepsy)
print(summary(model1))
library(lme4)
?lme4
?lmer
summary(data_epilepsy)
data_epilepsy
model2 <- glmer(y~B+T+A+T*B+V + (1 | patient), family=poisson(link=log), data=data_epilepsy)
library(HGLMMM)
summary(model2)
model3 <- hglm(fixed=y~B+T+A+T*B+V, random= 1 | patient, family=poisson(link=log), data=data_epilepsy)
summary(model3)
library(hglm)
model3 <- hglm(fixed=y~B+T+A+T*B+V, random= 1 | patient, family=poisson(link=log), data=data_epilepsy)
summary(model3)
library(hglm)
model3 <- hglm(fixed=y~B+T+A+T*B+V, random= ~ 1 | patient, family=poisson(link=log), data=data_epilepsy)
summary(model3)
?dhglm
??dhglm
library(dhglm)
model_mu<-DHGLMMODELING(Model="mean", Link="log",
LinPred=y~B+T+A+T*B+V+(1|patient),
RandDist=c("gaussian"))
model_phi<-DHGLMMODELING(Model="dispersion")
res_hglm<-dhglmfit(RespDist="poisson",DataMain=data_epilepsy,
MeanModel=model_mu,DispersionModel=model_phi)
exp(-1.433)
model2 <- glmer(y~B+T+A+T*B+V + (1 | patient), family=poisson(link=log), data=data_epilepsy)
summary(model2)
model_mu<-DHGLMMODELING(Model="mean", Link="log",
LinPred=y~B+T+A+T*B+V+(1|patient)+(1|id),
RandDist=c("gaussian","gamma"))
model_phi<-DHGLMMODELING(Model="dispersion")
res_hglm<-dhglmfit(RespDist="poisson",DataMain=data_epilepsy,
MeanModel=model_mu,DispersionModel=model_phi)
exp(-1.851)
library(hglm)
?hglm
n=20
X1 <- matrix(1,n,3)
X2 <- matrix(2,n,5)
Y <- data.frame(X1,X2)
Y
Y <- list(X1,X2)
Y
Y[[1]]
Y[[2]]
source('C:/Documents and Settings/All Users/Desktop/ht13/epi_bigRR/package/Test_package.R')
